import React, { createContext, useContext, useState, useEffect } from 'react';
import { Language } from '../types';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  languages: Language[];
  t: (key: string) => string;
}

const languages: Language[] = [
  { code: 'en', name: 'English', flag: 'üá¨üáß' },
  { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' }
];

const translations = {
  en: {
    'site.title': 'NameNest',
    'site.tagline': 'Beautiful Indian Baby Names with Meanings',
    'nav.home': 'Home',
    'nav.names': 'Names',
    'nav.blog': 'Blog',
    'nav.reviews': 'Reviews',
    'nav.favorites': 'Favorites',
    'nav.about': 'About',
    'nav.contact': 'Contact',
    'search.placeholder': 'Search for names...',
    'filter.gender': 'Gender',
    'filter.religion': 'Religion',
    'filter.all': 'All',
    'gender.boy': 'Boy',
    'gender.girl': 'Girl',
    'gender.unisex': 'Unisex',
    'religion.hindu': 'Hindu',
    'religion.muslim': 'Muslim',
    'religion.christian': 'Christian',
    'religion.sikh': 'Sikh',
    'hero.title': 'Discover Beautiful Indian Baby Names',
    'hero.subtitle': 'Find the perfect name for your little one from our collection of traditional and modern Indian names with beautiful meanings',
    'hero.cta': 'Explore Names',
    'hero.random': 'Random Name',
    'featured.blogs': 'Featured Articles',
    'testimonials.title': 'What Parents Say',
    'footer.description': 'Your trusted source for beautiful Indian baby names with meanings',
    'loading': 'Loading...',
    'favorites.add': 'Add to Favorites',
    'favorites.remove': 'Remove from Favorites',
    'read.more': 'Read More',
    'share': 'Share',
    'related.names': 'Related Names',
    'popular.names': 'Popular Names',
    'recent.blogs': 'Recent Articles'
  },
  hi: {
    'site.title': '‡§®‡•á‡§Æ‡§®‡•á‡§∏‡•ç‡§ü',
    'site.tagline': '‡§Ö‡§∞‡•ç‡§• ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§®‡§æ‡§Æ',
    'nav.home': '‡§π‡•ã‡§Æ',
    'nav.names': '‡§®‡§æ‡§Æ',
    'nav.blog': '‡§¨‡•ç‡§≤‡•â‡§ó',
    'nav.reviews': '‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ',
    'nav.favorites': '‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ',
    'nav.about': '‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç',
    'nav.contact': '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï',
    'search.placeholder': '‡§®‡§æ‡§Æ ‡§ñ‡•ã‡§ú‡•á‡§Ç...',
    'filter.gender': '‡§≤‡§ø‡§Ç‡§ó',
    'filter.religion': '‡§ß‡§∞‡•ç‡§Æ',
    'filter.all': '‡§∏‡§≠‡•Ä',
    'gender.boy': '‡§≤‡§°‡§º‡§ï‡§æ',
    'gender.girl': '‡§≤‡§°‡§º‡§ï‡•Ä',
    'gender.unisex': '‡§¶‡•ã‡§®‡•ã‡§Ç',
    'religion.hindu': '‡§π‡§ø‡§Ç‡§¶‡•Ç',
    'religion.muslim': '‡§Æ‡•Å‡§∏‡•ç‡§≤‡§ø‡§Æ',
    'religion.christian': '‡§à‡§∏‡§æ‡§à',
    'religion.sikh': '‡§∏‡§ø‡§ñ',
    'hero.title': '‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§ñ‡•ã‡§ú‡•á‡§Ç',
    'hero.subtitle': '‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§î‡§∞ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§®‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§π‡§Æ‡§æ‡§∞‡•á ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π ‡§∏‡•á ‡§Ö‡§™‡§®‡•á ‡§õ‡•ã‡§ü‡•á ‡§∏‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡•Ä ‡§®‡§æ‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç',
    'hero.cta': '‡§®‡§æ‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç',
    'hero.random': '‡§∞‡•à‡§Ç‡§°‡§Æ ‡§®‡§æ‡§Æ',
    'featured.blogs': '‡§µ‡§ø‡§∂‡•á‡§∑ ‡§≤‡•á‡§ñ',
    'testimonials.title': '‡§Æ‡§æ‡§§‡§æ-‡§™‡§ø‡§§‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç',
    'footer.description': '‡§Ö‡§∞‡•ç‡§• ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•Å‡§Ç‡§¶‡§∞ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§®‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡§æ ‡§Ü‡§™‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§∏‡•ç‡§∞‡•ã‡§§',
    'loading': '‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...',
    'favorites.add': '‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç',
    'favorites.remove': '‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§∏‡•á ‡§π‡§ü‡§æ‡§è‡§Ç',
    'read.more': '‡§î‡§∞ ‡§™‡§¢‡§º‡•á‡§Ç',
    'share': '‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç',
    'related.names': '‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§®‡§æ‡§Æ',
    'popular.names': '‡§≤‡•ã‡§ï‡§™‡•ç‡§∞‡§ø‡§Ø ‡§®‡§æ‡§Æ',
    'recent.blogs': '‡§π‡§æ‡§≤ ‡§ï‡•á ‡§≤‡•á‡§ñ'
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>(languages[0]);

  useEffect(() => {
    const savedLang = localStorage.getItem('namenest-language');
    if (savedLang) {
      const lang = languages.find(l => l.code === savedLang);
      if (lang) setLanguage(lang);
    }
  }, []);

  const handleSetLanguage = (lang: Language) => {
    setLanguage(lang);
    localStorage.setItem('namenest-language', lang.code);
  };

  const t = (key: string): string => {
    return translations[language.code][key as keyof typeof translations.en] || key;
  };

  return (
    <LanguageContext.Provider value={{
      language,
      setLanguage: handleSetLanguage,
      languages,
      t
    }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
